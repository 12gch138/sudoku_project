import { BOX_SIZE, SENCODE_REGEX, SUDOKU_SIZE } from '@sudoku/constants';
import { decodeSencode, encodeSudoku } from '@sudoku/sencode';
import { hints } from '@sudoku/stores/hints';
import { generateSudoku, solveSudoku } from '@sudoku/sudoku';
import { derived, get, writable } from 'svelte/store';
import { difficulty } from './difficulty';

function createGrid() {
	const grid = writable((() => {
		let query = location.search;

		if (query.startsWith('?')) {
			query = query.slice(1);
		}

		if (query.trim().length !== 0 && SENCODE_REGEX.test(query)) {
			return decodeSencode(query);
		}

		return generateSudoku(get(difficulty));
	})());

	return {
		subscribe: grid.subscribe,

		generate: (_difficulty) => {
			grid.set(generateSudoku(_difficulty));
		},

		decodeSencode: (sencode) => {
			grid.set(decodeSencode(sencode));
		},

		get: (gridStore, x, y) => {
			return gridStore[y - 1][x - 1];
		},

		getSencode: (gridStore) => {
			return encodeSudoku(gridStore);
		},
	};
}

export const grid = createGrid();


function createUserGrid() {
	const userGrid = writable([
		[0, 0, 0, 0, 0, 0, 0, 0, 0],
		[0, 0, 0, 0, 0, 0, 0, 0, 0],
		[0, 0, 0, 0, 0, 0, 0, 0, 0],
		[0, 0, 0, 0, 0, 0, 0, 0, 0],
		[0, 0, 0, 0, 0, 0, 0, 0, 0],
		[0, 0, 0, 0, 0, 0, 0, 0, 0],
		[0, 0, 0, 0, 0, 0, 0, 0, 0],
		[0, 0, 0, 0, 0, 0, 0, 0, 0],
		[0, 0, 0, 0, 0, 0, 0, 0, 0],
	]);

	grid.subscribe(_grid => {
		let newGrid = [];

		for (let y = 0; y < SUDOKU_SIZE; y++) {
			newGrid[y] = [];
			for (let x = 0; x < SUDOKU_SIZE; x++) {
				newGrid[y][x] = _grid[y][x];
			}
		}

		userGrid.set(newGrid);
	});

	return {
		subscribe: userGrid.subscribe,

		set: (pos, value) => {
			userGrid.update(_grid => {
				_grid[pos.y - 1][pos.x - 1] = value;
				return _grid;
			});
		},

		applyHint: (pos) => {
			hints.useHint();
			userGrid.update(_grid => {
				const solvedSudoku = solveSudoku(_grid);
				_grid[pos.y - 1][pos.x - 1] = solvedSudoku[pos.y - 1][pos.x - 1];
				return _grid;
			});
		},
	};
}

export const userGrid = createUserGrid();

export const invalidCells = derived(userGrid, $userGrid => {
	const _invalidCells = [];

	const addInvalid = (x, y) => {
		const xy = (x + 1) + ',' + (y + 1);
		if (!_invalidCells.includes(xy)) _invalidCells.push(xy);
	};

	for (let y = 0; y < SUDOKU_SIZE; y++) {
		for (let x = 0; x < SUDOKU_SIZE; x++) {

			const value = $userGrid[y][x];

			if (value) {
				for (let i = 0; i < SUDOKU_SIZE; i++) {
					// Check the row
					if (i !== x && $userGrid[y][i] === value) {
						addInvalid(x, y);
					}

					// Check the column
					if (i !== y && $userGrid[i][x] === value) {
						addInvalid(x, i);
					}
				}

				// Check the box
				const startY = Math.floor(y / BOX_SIZE) * BOX_SIZE;
				const endY = startY + BOX_SIZE;
				const startX = Math.floor(x / BOX_SIZE) * BOX_SIZE;
				const endX = startX + BOX_SIZE;
				for (let row = startY; row < endY; row++) {
					for (let col = startX; col < endX; col++) {
						if (row !== y && col !== x && $userGrid[row][col] === value) {
							addInvalid(col, row);
						}
					}
				}
			}

		}
	}

	return _invalidCells;
}, []);