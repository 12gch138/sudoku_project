import { SENCODE_REGEX } from '@sudoku/constants';
import { decodeSencode } from '@sudoku/sencode';
import { generateSudoku, solveSudoku } from '@sudoku/sudoku';
import { get, writable } from 'svelte/store';
import { difficulty } from './difficulty';

function createGrid() {
	const grid = writable((() => {
		let query = location.search;

		if (query.startsWith('?')) {
			query = query.slice(1);
		}

		if (query.trim().length !== 0 && SENCODE_REGEX.test(query)) {
			return decodeSencode(query);
		}

		return generateSudoku(get(difficulty));
	})());

	return {
		subscribe: grid.subscribe,

		generate: (_difficulty) => {
			grid.set(generateSudoku(_difficulty));
		},

		decodeSencode: (sencode) => {
			grid.set(decodeSencode(sencode));
		},

		get: (gridStore, x, y) => {
			return gridStore[y - 1][x - 1];
		},

		getHint: (gridStore, x, y) => {
			const solvedSudoku = solveSudoku(gridStore);
			return solvedSudoku[y - 1][x - 1];
		},

		isEmpty: (gridStore, x, y) => {
			return (gridStore[y - 1][x - 1] === 0);
		}
	};
}

export const grid = createGrid();

function createUserGrid() {
	const userGrid = writable([
		[0, 0, 0, 0, 0, 0, 0, 0, 0],
		[0, 0, 0, 0, 0, 0, 0, 0, 0],
		[0, 0, 0, 0, 0, 0, 0, 0, 0],
		[0, 0, 0, 0, 0, 0, 0, 0, 0],
		[0, 0, 0, 0, 0, 0, 0, 0, 0],
		[0, 0, 0, 0, 0, 0, 0, 0, 0],
		[0, 0, 0, 0, 0, 0, 0, 0, 0],
		[0, 0, 0, 0, 0, 0, 0, 0, 0],
		[0, 0, 0, 0, 0, 0, 0, 0, 0],
	]);

	return {
		subscribe: userGrid.subscribe,

		set: (x, y, value) => {
			userGrid.update(_grid => {
				_grid[y - 1][x - 1] = value;
				return _grid;
			});
		},

		reset: () => {
			userGrid.set([
				[0, 0, 0, 0, 0, 0, 0, 0, 0],
				[0, 0, 0, 0, 0, 0, 0, 0, 0],
				[0, 0, 0, 0, 0, 0, 0, 0, 0],
				[0, 0, 0, 0, 0, 0, 0, 0, 0],
				[0, 0, 0, 0, 0, 0, 0, 0, 0],
				[0, 0, 0, 0, 0, 0, 0, 0, 0],
				[0, 0, 0, 0, 0, 0, 0, 0, 0],
				[0, 0, 0, 0, 0, 0, 0, 0, 0],
				[0, 0, 0, 0, 0, 0, 0, 0, 0],
			])
		}
	}
}

export const userGrid = createUserGrid();