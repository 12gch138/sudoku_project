import { writable } from 'svelte/store';
import { userGrid,promptGrid } from './grid';
import {candidates} from "./candidates";
import {manager} from "../strategy/strategy_manager"
export const testGrid = writable([0])

export const candidate_len = writable(0);

testGrid.set([
    [[0], [9,1,2], [6,8], [0], [0], [0], [0], [0], [0]],
    [[1], [0], [0], [0], [5], [0], [0], [0], [0]],
    [[0], [0], [2], [0], [8], [0], [7], [4], [0]],
    [[0], [0], [0], [0], [0], [0], [0], [0], [0]],
    [[0], [0], [0], [0], [0], [0], [0], [0], [0]],
    [[0], [0], [0], [0], [0], [0], [0], [0], [0]],
    [[0], [0], [0], [0], [0], [5], [0], [0], [0]],
    [[7], [4], [0], [0], [0], [0], [0], [0], [0]],
    [[0], [0], [1], [0], [0], [0], [0], [0], [6]]
]);

export function change_testgrid() {
    // 使用 `update` 来更新 testGrid 中的值
    testGrid.update(grid => {
        grid[0][0][0] += 1;
        grid[grid[0][0][0]][0][0] = 10; // 更新第0行第8列的值
        return grid;  // 返回修改后的 grid
    });
}
function createPrompt() {
    const prompt = writable();
    promptGrid.subscribe((grid) => {
        prompt.update(() => {
            return manager.executeStrategies(grid);
        });
    });
    return prompt;
}
export const prompt = createPrompt();
function filterCoordinates() {
    const promptCoordinates = writable([]);
    prompt.subscribe((grid)=>{
        let selectedCoordinates = [];
        for (let y = 0; y < grid.length; y++) {

            for (let x = 0; x < grid[y].length; x++) {
                if (grid[y][x].length != 0 ) {
                    selectedCoordinates.push({ x, y, value: grid[y][x] });
                }
            }
            // console.log(grid);
    }
    promptCoordinates.set(selectedCoordinates);
    });

    return promptCoordinates;
}

export const promptCoordinates=filterCoordinates();

export function updateUserGridFromCoordinates() {
    promptCoordinates.subscribe((coordinates) => {

        let len = 0;
        candidate_len.subscribe((clen)=>{
            len = clen;
        })

        coordinates.forEach(({ x, y, value }) => {
            candidates.clear({x,y});
            // if ( value.length === 1) {
            //     // 当 value 长度为 1 时，调用 userGrid.set
            //     userGrid.set({ x, y }, value[0]);
            // }
            if (value.length >= 1 && value.length <= len) {
                // 当 value 包含多个元素时，逐个调用 candidates.add
                value.forEach(singleValue => {
                    candidates.add({ x, y }, singleValue); // 对每个值调用 candidates.add
                });
            }
        });
    });
}


