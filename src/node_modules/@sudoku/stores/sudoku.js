import { SENCODE_REGEX } from '@sudoku/constants';
import { decodeSencode } from '@sudoku/sencode';
import { generateSudoku, solveSudoku } from '@sudoku/sudoku';
import { get, writable } from 'svelte/store';
import { difficulty } from './difficulty';

function createSudoku() {
	const grid = writable((() => {
		let query = location.search;

		if (query.startsWith('?')) {
			query = query.slice(1);
		}

		if (query.trim().length !== 0 && SENCODE_REGEX.test(query)) {
			return decodeSencode(query);
		}

		return generateSudoku(get(difficulty));
	})());

	difficulty.subscribe(_difficulty => {
		grid.set(generateSudoku(_difficulty));
	});

	return {
		subscribe: grid.subscribe,

		getHint: (x, y) => {
			const solvedSudoku = solveSudoku(get(grid));
			return solvedSudoku[y][x];
		},

		set: (x, y, value) => {
			grid.update(_grid => {
				_grid[y][x] = value;
				return _grid;
			});
		},

		get: (x, y) => {
			return get(grid)[y][x];
		},
	};
}

export const sudoku = createSudoku();