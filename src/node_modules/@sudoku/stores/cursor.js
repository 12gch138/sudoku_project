import { SUDOKU_SIZE } from '@sudoku/constants';
import { getBoxPos } from '@sudoku/helpers';
import { userGrid } from '@sudoku/stores/grid';
import { derived, writable } from 'svelte/store';

function createCursor() {
	const cursor = writable({ x: 0, y: 0 });

	return {
		subscribe: cursor.subscribe,

		set: (x, y) => {
			cursor.set({ x, y });
		},

		move: (xDir = 0, yDir = 0) => {
			cursor.update(currCursor => {
				const newX = currCursor.x + xDir;
				const newY = currCursor.y + yDir;

				if (newX > 0 && newX <= SUDOKU_SIZE && newY > 0 && newY <= SUDOKU_SIZE) {
					return {
						x: newX,
						y: newY,
					};
				}

				return currCursor;
			});
		},

		reset: () => {
			cursor.set({ x: 0, y: 0 });
		},

		isInitial: (cursorStore) => {
			return (cursorStore.x === 0 && cursorStore.y === 0);
		},

		isInArea: (cursorStore, x, y) => {
			const cursorBoxPos = getBoxPos(cursorStore.x - 1, cursorStore.y - 1);
			const cellBoxPos = getBoxPos(x - 1, y - 1);
			return (cursorStore.x === x || cursorStore.y === y || (cursorBoxPos.x === cellBoxPos.x && cursorBoxPos.y === cellBoxPos.y));
		},
	};
}

export const cursor = createCursor();