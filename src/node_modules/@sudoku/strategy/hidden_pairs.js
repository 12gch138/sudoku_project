import {Strategy} from "./strategy.js"
import { basic_startegy } from "./basic.js"

class Hidden_Pairs_Strategy extends Strategy {
    constructor() {
        super('Hidden_Pairs');
    }

    get_candidate(board) {
        let candidates = basic_startegy.get_candidate(board);
        let changed = true;
        
        // 循环处理直到没有变化
        while (changed) {
            // 保存处理前的状态，用于比较是否有变化
            const previousState = JSON.stringify(candidates);
            
            this.handleHiddenPairs(board, candidates);
            
            // 比较处理后的状态，检查是否有变化
            const currentState = JSON.stringify(candidates);
            changed = previousState !== currentState;
        }
        return candidates;
    }

    handleHiddenPairs(board, candidates) {
        // 检查行中的隐藏对
        for (let row = 0; row < 9; row++) {
            const pairs = this.findHiddenPairsInRow(board, row, candidates);
            if (pairs.length > 0) {
                this.applyHiddenPairsToRow(pairs, row, candidates);
            }
        }

        // 检查列中的隐藏对
        for (let col = 0; col < 9; col++) {
            const pairs = this.findHiddenPairsInColumn(board, col, candidates);
            if (pairs.length > 0) {
                this.applyHiddenPairsToColumn(pairs, col, candidates);
            }
        }

        // 检查九宫格中的隐藏对
        for (let box = 0; box < 9; box++) {
            const pairs = this.findHiddenPairsInBox(board, box, candidates);
            if (pairs.length > 0) {
                this.applyHiddenPairsToBox(pairs, box, candidates);
            }
        }
    }

    findHiddenPairsInRow(board, row, candidates) {
        const pairs = [];
        const numberPositions = new Map();

        // 收集每个数字在该行出现的位置
        for (let col = 0; col < 9; col++) {
            if (board[row][col] === 0) {
                for (const num of candidates[row][col]) {
                    if (!numberPositions.has(num)) {
                        numberPositions.set(num, []);
                    }
                    numberPositions.get(num).push(col);
                }
            }
        }

        // 寻找只出现在两个位置的数字对
        for (let num1 = 1; num1 <= 9; num1++) {
            for (let num2 = num1 + 1; num2 <= 9; num2++) {
                const pos1 = numberPositions.get(num1) || [];
                const pos2 = numberPositions.get(num2) || [];
                
                if (pos1.length === 2 && pos2.length === 2 && 
                    this.arraysEqual(pos1, pos2)) {
                    pairs.push({
                        numbers: [num1, num2],
                        positions: pos1.map(col => ({row, col}))
                    });
                }
            }
        }

        return pairs;
    }

    findHiddenPairsInColumn(board, col, candidates) {
        const pairs = [];
        const numberPositions = new Map();

        for (let row = 0; row < 9; row++) {
            if (board[row][col] === 0) {
                for (const num of candidates[row][col]) {
                    if (!numberPositions.has(num)) {
                        numberPositions.set(num, []);
                    }
                    numberPositions.get(num).push(row);
                }
            }
        }

        for (let num1 = 1; num1 <= 9; num1++) {
            for (let num2 = num1 + 1; num2 <= 9; num2++) {
                const pos1 = numberPositions.get(num1) || [];
                const pos2 = numberPositions.get(num2) || [];
                
                if (pos1.length === 2 && pos2.length === 2 && 
                    this.arraysEqual(pos1, pos2)) {
                    pairs.push({
                        numbers: [num1, num2],
                        positions: pos1.map(row => ({row, col}))
                    });
                }
            }
        }

        return pairs;
    }

    findHiddenPairsInBox(board, boxIndex, candidates) {
        const pairs = [];
        const numberPositions = new Map();
        const boxRow = Math.floor(boxIndex / 3) * 3;
        const boxCol = (boxIndex % 3) * 3;

        for (let i = 0; i < 3; i++) {
            for (let j = 0; j < 3; j++) {
                const row = boxRow + i;
                const col = boxCol + j;
                if (board[row][col] === 0) {
                    for (const num of candidates[row][col]) {
                        if (!numberPositions.has(num)) {
                            numberPositions.set(num, []);
                        }
                        numberPositions.get(num).push({row, col});
                    }
                }
            }
        }

        for (let num1 = 1; num1 <= 9; num1++) {
            for (let num2 = num1 + 1; num2 <= 9; num2++) {
                const pos1 = numberPositions.get(num1) || [];
                const pos2 = numberPositions.get(num2) || [];
                
                if (pos1.length === 2 && pos2.length === 2 && 
                    this.positionsEqual(pos1, pos2)) {
                    pairs.push({
                        numbers: [num1, num2],
                        positions: pos1
                    });
                }
            }
        }

        return pairs;
    }

    applyHiddenPairsToRow(pairs, row, candidates) {
        for (const pair of pairs) {
            for (const pos of pair.positions) {
                // 将这些位置的候选数字限制为隐藏对中的数字
                candidates[pos.row][pos.col] = [...pair.numbers];
            }
        }
    }

    applyHiddenPairsToColumn(pairs, col, candidates) {
        for (const pair of pairs) {
            for (const pos of pair.positions) {
                candidates[pos.row][pos.col] = [...pair.numbers];
            }
        }
    }

    applyHiddenPairsToBox(pairs, boxIndex, candidates) {
        for (const pair of pairs) {
            for (const pos of pair.positions) {
                candidates[pos.row][pos.col] = [...pair.numbers];
            }
        }
    }

    arraysEqual(arr1, arr2) {
        if (arr1.length !== arr2.length) return false;
        return arr1.every((val, idx) => val === arr2[idx]);
    }

    positionsEqual(pos1, pos2) {
        if (pos1.length !== pos2.length) return false;
        return pos1.every(p1 => 
            pos2.some(p2 => p1.row === p2.row && p1.col === p2.col)
        );
    }
}

export const hidden_pairs_strategy = new Hidden_Pairs_Strategy(); 