import { Strategy } from "./strategy.js"
import { basic_startegy } from "./basic.js";
import { naked_pairs_strategy } from "./naked_pairs.js";
import { naked_triple_strategy } from "./naked_triple.js";
import { naked_quad_strategy } from "./naked_quad.js";
import { hidden_pairs_strategy } from "./hidden_pairs.js";
import { x_wing_strategy, swordfish_strategy, jellyfish_strategy } from "./fish.js";

// 策略管理器类
export class StrategyManager {
    constructor() {
        this.strategies = [];
        this.candidateLists = [];
    }

    // 添加策略
    addStrategy(strategy) {
        if (!(strategy instanceof Strategy)) {
            throw new Error('Only instances of Strategy can be added.');
        }
        this.strategies.push(strategy);
    }

    // 根据策略的名称进行删除
    removeStrategy(strategy_name) {
        for(let index=0; index<=this.strategies.length; index++) {
            if(this.strategies[index].name == strategy_name){
                delete this.strategies[index--];
            }
        }
    }

    // 根据board获取不同策略下的candidate
    executeStrategies(board) {
        this.candidateLists = [];
        for (const strategy of this.strategies) {
            const candidates = strategy.get_candidate(board);
            this.candidateLists.push(candidates);
        }
        return this.getIntersectionCandidates();
    }

    // 对candidateLists取交集
    getIntersectionCandidates() {
        if (this.candidateLists.length === 0) {
            return {};
        }
        
        let newIntersection = this.candidateLists[0];

        for (let i = 1; i < this.candidateLists.length; i++) {
            for (let row=0; row<9; row++) {
                for (let col=0; col<9; col++) {
                    newIntersection[row][col] = newIntersection[row][col].filter(num => this.candidateLists[i][row][col].includes(num))
                }
            }
        }

        return newIntersection;
    }

    getDictFromMatrix(board) {
        let dict = {};
        this.executeStrategies(board);
        let matrix = this.getIntersectionCandidates();
        for (let row=0; row<9; row++) {
            for (let col=0; col<9; col++) {
                if (matrix[row][col].length == 1) {
                    dict[row + ',' + col] = matrix[row][col];
                }
            }
        }
        return dict;
    }

    getMatrix(board) {
        let matrix = [];
        this.executeStrategies(board);
        let candidates = this.getIntersectionCandidates();
        for (let row=0; row<9; row++) {
            matrix.push([]);
            for (let col=0; col<9; col++) {
                if (candidates[row][col].length == 1) {
                    matrix[row][col] = candidates[row][col][0];
                }
                else {
                    matrix[row][col] = 0;
                }
            }
        }
        return matrix;
    }
}

export const manager = new StrategyManager();
manager.addStrategy(naked_pairs_strategy)
manager.addStrategy(basic_startegy)
manager.addStrategy(naked_triple_strategy)
manager.addStrategy(naked_quad_strategy)
manager.addStrategy(hidden_pairs_strategy)
manager.addStrategy(x_wing_strategy)
manager.addStrategy(swordfish_strategy)
manager.addStrategy(jellyfish_strategy)